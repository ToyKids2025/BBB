/**
 * Teste de Performance e Lat√™ncia
 * Objetivo: Lat√™ncia < 50ms
 */

const { performance } = require('perf_hooks');
const https = require('https');
const http = require('http');

// URLs para testar
const TEST_URLS = [
  'https://www.amazon.com.br/dp/B08N5WRWNW',
  'https://produto.mercadolivre.com.br/MLB-1234567',
  'http://localhost:3000/r/test123'
];

/**
 * Mede lat√™ncia de redirect
 */
async function measureRedirectLatency(url) {
  return new Promise((resolve) => {
    const startTime = performance.now();
    const protocol = url.startsWith('https') ? https : http;

    const req = protocol.get(url, {
      timeout: 5000,
      headers: {
        'User-Agent': 'BBB-Performance-Test/1.0'
      }
    }, (res) => {
      const latency = performance.now() - startTime;

      // N√£o seguir redirects, apenas medir primeira resposta
      res.destroy();

      resolve({
        url,
        statusCode: res.statusCode,
        latency: latency.toFixed(2),
        headers: res.headers
      });
    });

    req.on('error', (err) => {
      const latency = performance.now() - startTime;
      resolve({
        url,
        error: err.message,
        latency: latency.toFixed(2)
      });
    });

    req.on('timeout', () => {
      req.destroy();
      resolve({
        url,
        error: 'Timeout',
        latency: 5000
      });
    });
  });
}

/**
 * Teste de Add-to-Cart Amazon
 */
function generateAmazonAddToCartUrl(productId) {
  const AMAZON_TAG = 'buscabusca0f-20';

  // URL padr√£o de produto
  const productUrl = `https://www.amazon.com.br/dp/${productId}?tag=${AMAZON_TAG}`;

  // URL com add-to-cart autom√°tico
  const addToCartUrl = `https://www.amazon.com.br/gp/aws/cart/add.html` +
    `?AssociateTag=${AMAZON_TAG}` +
    `&ASIN.1=${productId}` +
    `&Quantity.1=1` +
    `&add=add`;

  return {
    productUrl,
    addToCartUrl
  };
}

/**
 * Teste principal
 */
async function runPerformanceTests() {
  console.log('üöÄ TESTE DE PERFORMANCE E LAT√äNCIA\n');
  console.log('=' .repeat(60));

  // 1. Teste de Lat√™ncia
  console.log('\nüìä TESTE DE LAT√äNCIA (Meta: <50ms)\n');

  for (const url of TEST_URLS) {
    const result = await measureRedirectLatency(url);

    if (result.error) {
      console.log(`‚ùå ${result.url}`);
      console.log(`   Erro: ${result.error}`);
      console.log(`   Lat√™ncia: ${result.latency}ms\n`);
    } else {
      const isGood = parseFloat(result.latency) < 50;
      const icon = isGood ? '‚úÖ' : '‚ö†Ô∏è';

      console.log(`${icon} ${result.url}`);
      console.log(`   Status: ${result.statusCode}`);
      console.log(`   Lat√™ncia: ${result.latency}ms ${isGood ? '(BOM!)' : '(ALTO!)'}`);

      if (result.headers['set-cookie']) {
        console.log(`   Cookie: ${result.headers['set-cookie'][0].substring(0, 50)}...`);
      }
      console.log();
    }
  }

  // 2. Teste Add-to-Cart Amazon
  console.log('üõí TESTE ADD-TO-CART AMAZON (Echo Dot)\n');

  const echoDotId = 'B09B8V1LZ3'; // Echo Dot 5¬™ gera√ß√£o
  const amazonUrls = generateAmazonAddToCartUrl(echoDotId);

  console.log('URL do Produto (com tag):');
  console.log(amazonUrls.productUrl);
  console.log('\nURL Add-to-Cart Autom√°tico:');
  console.log(amazonUrls.addToCartUrl);

  // Medir lat√™ncia do add-to-cart
  const addToCartResult = await measureRedirectLatency(amazonUrls.addToCartUrl);

  console.log('\nüìà Resultado Add-to-Cart:');
  if (addToCartResult.error) {
    console.log(`‚ùå Erro: ${addToCartResult.error}`);
  } else {
    console.log(`‚úÖ Status: ${addToCartResult.statusCode}`);
    console.log(`‚è±Ô∏è Lat√™ncia: ${addToCartResult.latency}ms`);
  }

  // 3. Teste de Cookies Seguros
  console.log('\nüîí CONFIGURA√á√ÉO DE COOKIES SEGUROS\n');

  const cookieConfig = {
    name: 'bb_ref',
    value: 'amazon:user123:click456',
    settings: 'Max-Age=2592000; Path=/; Secure; SameSite=Lax; HttpOnly'
  };

  console.log('Configura√ß√£o Recomendada:');
  console.log(`Cookie: ${cookieConfig.name}=${cookieConfig.value}`);
  console.log(`Settings: ${cookieConfig.settings}`);
  console.log('\nCaracter√≠sticas:');
  console.log('‚úÖ Secure: S√≥ HTTPS');
  console.log('‚úÖ SameSite=Lax: Protege CSRF mas permite navega√ß√£o');
  console.log('‚úÖ HttpOnly: Protege de XSS');
  console.log('‚úÖ Max-Age=30 dias: Persist√™ncia longa');

  // 4. Compatibilidade com Browsers
  console.log('\nüì± COMPATIBILIDADE DE BROWSERS\n');

  const browsers = {
    'Safari iOS': {
      cookies: '‚ö†Ô∏è ITP limita a 7 dias',
      localStorage: '‚úÖ Funciona',
      indexedDB: '‚úÖ Funciona',
      solu√ß√£o: 'Use m√∫ltiplas camadas de persist√™ncia'
    },
    'Instagram Browser': {
      cookies: '‚ö†Ô∏è Limitado',
      localStorage: '‚ö†Ô∏è Pode ser limpo',
      indexedDB: '‚úÖ Melhor op√ß√£o',
      solu√ß√£o: 'IndexedDB + Cache API'
    },
    'Facebook Browser': {
      cookies: '‚ö†Ô∏è Limitado',
      localStorage: '‚úÖ Funciona',
      indexedDB: '‚úÖ Funciona',
      solu√ß√£o: 'localStorage + IndexedDB'
    },
    'Chrome/Edge': {
      cookies: '‚úÖ Total',
      localStorage: '‚úÖ Total',
      indexedDB: '‚úÖ Total',
      solu√ß√£o: 'Todas as op√ß√µes funcionam'
    }
  };

  for (const [browser, support] of Object.entries(browsers)) {
    console.log(`${browser}:`);
    console.log(`  Cookies: ${support.cookies}`);
    console.log(`  LocalStorage: ${support.localStorage}`);
    console.log(`  IndexedDB: ${support.indexedDB}`);
    console.log(`  üí° ${support.solu√ß√£o}\n`);
  }

  // 5. Resumo Final
  console.log('=' .repeat(60));
  console.log('\nüìã RESUMO DO TESTE:\n');

  // Calcular m√©dia de lat√™ncia
  let totalLatency = 0;
  let validTests = 0;

  for (const url of TEST_URLS) {
    const result = await measureRedirectLatency(url);
    if (!result.error) {
      totalLatency += parseFloat(result.latency);
      validTests++;
    }
  }

  const avgLatency = validTests > 0 ? (totalLatency / validTests).toFixed(2) : 'N/A';

  console.log(`‚è±Ô∏è Lat√™ncia M√©dia: ${avgLatency}ms ${avgLatency < 50 ? '‚úÖ' : '‚ö†Ô∏è'}`);
  console.log(`üõí Add-to-Cart Amazon: Configurado ‚úÖ`);
  console.log(`üîí Cookies Seguros: Secure + SameSite=Lax ‚úÖ`);
  console.log(`üì± Safari iOS: M√∫ltiplas camadas de persist√™ncia ‚úÖ`);
  console.log(`üì∏ Instagram: IndexedDB + Fallbacks ‚úÖ`);

  console.log('\n‚ú® Sistema otimizado para m√°xima persist√™ncia!');
}

// Executar testes
runPerformanceTests().catch(console.error);